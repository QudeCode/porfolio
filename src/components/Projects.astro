---
import Project from './Project.astro';
import { TAGS, type Tag } from '../data/tags.astro';

// Obtener los proyectos desde la API
const fetchProjects = async () => {
  try {
    const response = await fetch('https://portfolio.edit.qudecode.com/api/projects');
    
    if (!response.ok) {
      throw new Error('Failed to fetch projects');
    }
    
    const projects = await response.json();
    return projects.length > 0 ? projects : [];
  } catch (error) {
    console.error('Error fetching projects:', error);
    return [];
  }
};

// Obtener proyectos al renderizar
const fetchedProjects = await fetchProjects();

// Mapear los proyectos a los objetos que usan tags como objetos (no como strings)
const projects = fetchedProjects.length > 0
  ? fetchedProjects.map((project: { image: string, title: string, description: string, tags: string[], link: string, github: string }) => ({
      ...project, 
      image: "/projects/" + project.image,
      tags: project.tags
        .map((tag: string) => TAGS[tag]) // Convertir cada tag string en un objeto Tag
        .filter(Boolean), // Filtramos valores undefined si no existe la clave en TAGS
    }))
  : [];
---

<div class="flex flex-col gap-y-16">
  {projects.length === 0 ? (
    <p>Sorry, there was an error loading the projects.</p>
  ) : (
    projects.map(({ image, title, description, tags, link, github }: { image: string, title: string, description: string, tags: Tag[], link: string, github: string }) => (
      <Project 
        image={image}
        title={title}
        description={description}
        tags={tags}
        link={link}
        github={github}
      />
    ))
  )}
</div>